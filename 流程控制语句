C语言除默认的顺序结构语句外还提供了条件语句和循环语句

条件语句包括：if语句和switch语句；
if（条件）
{
  //条件满足时执行此处
}
else
{
  //条件不满足时执行此处
}

当有多个条件进行判断时：
if（条件1）
{

}
else if（条件2）
{

}
..
else if（条件n）
{

}
else
{

}
或使用：
switch（value）
{
  case 1：
    // 需要执行的语句
    break；
    
  case 2：
    // 需要执行的语句
    break；
    
    ...
default：
  break；
}
case 后面的1、2可以是其他形式如宏定义、字符串、枚举等，当决不能是变量
break需要注意，如果每次只执行1个case，那么每个case之后都需要加break，但是如果当多个case执行的动作相同，则可以把这几个case放在一起，只在
最后一个case完成加上break，如：
switch（value）
{
  case 1：
  case 2：
  case 3：
    break；
    
  case 4：
    break；
}

当条件较少时（一般是少于5个），建议优先选择if，当条件过多时（多于5个）一般建议使用switch，使用if是要按照条件被触发的概率由大到小进行排列，这样可以
提高程序的执行效率，因为if语句是从第一个条件开始判断，直到遇见第一个满足条件的语句进行执行，然后结束整个if的判断。
switch则不然，switch是会生成一个跳转的表，会根据switch后面的value直接跳转至具体的case进行执行，所以switch在使用时无需考虑每个case被执行的概率。

循环语句包括：while语句、do while语句和for语句。
循环语句使用时需要注意循环条件的处理，循环条件一定要受控，除特殊需求外，一定避免出现死循环。
while（条件判断）
{
  // 需要执行的语句
}
while先进行条件判断，若为真则执行需要执行的语句，若为假则不执行，该循环中需要执行的语句可能不被执行。
do
{
  // 需要执行的语句 
}while (条件判断);
先执行一次do的内容，在进行条件判断，若为真再执行一次，然后在判断条件，直至条件判断为假，这个循环中需要执行的语句一定会被执行一次。

for循环的基本格式如下：
for（i=0；i<条件;i++）
{

}
其中i=0是给条件控制变量赋初值
“i<条件”是进行条件判断
i++是对控制变量进行修改
for循环还有一些变形的写法如：
 int i = 0;
 for(;i<条件;i++)
 {
 
 }
 
 
 int i = 0;
 for(;i<条件;)
 {
    i++;
 }
 
 死循环顾名思义就是这个循环会一直执行到死！！
 怎么做到呢？确保条件永远为真就可以了
 
 while（1）
 {
 }
 
 for（；；）
 {
 }
